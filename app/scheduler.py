from apscheduler.schedulers.background import BackgroundScheduler
from apscheduler.triggers.cron import CronTrigger
from app.database import SessionLocal
from app.subscription.models import Subscription, SubscriptionInstance, StatusEnum, FrequencyEnum
from datetime import datetime, timedelta
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class TestScheduler:
    def __init__(self):
        self.scheduler = BackgroundScheduler()
        self.setup_jobs()
    
    def setup_jobs(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–¥–∞—á –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        
        # –ó–∞–¥–∞—á–∞: –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –¥–ª—è –Ω–æ–≤–æ–≥–æ –º–µ—Å—è—Ü–∞ (1-–≥–æ —á–∏—Å–ª–∞ –∫–∞–∂–¥–æ–≥–æ –º–µ—Å—è—Ü–∞ –≤ 9:00)
        self.scheduler.add_job(
            func=self.create_new_month_instances,
            trigger=CronTrigger(day=1, hour=9, minute=0),  # 1-–≥–æ —á–∏—Å–ª–∞ –≤ 9:00
            id='new_month_instances',
            name='–°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –¥–ª—è –Ω–æ–≤–æ–≥–æ –º–µ—Å—è—Ü–∞',
            replace_existing=True
        )
        
        # –ó–∞–¥–∞—á–∞: –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç (–¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞)
        self.scheduler.add_job(
            func=self.log_scheduler_status,
            trigger=CronTrigger(minute='*/5'),  # –ö–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
            id='scheduler_status_log',
            name='–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞',
            replace_existing=True
        )
    
    def create_test_instance(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –ø–æ–¥–ø–∏—Å–∫–∏"""
        db = None
        try:
            logger.info("üïê –ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏: —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞")
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π
            db = SessionLocal()
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—É—é –¥–æ—Å—Ç—É–ø–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É
            subscription = db.query(Subscription).filter(
                Subscription.archived_at.is_(None)
            ).first()
            
            if not subscription:
                logger.warning("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞")
                return
            
            # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å —Ç–µ–∫—É—â–∏–º –≤—Ä–µ–º–µ–Ω–µ–º
            now = datetime.utcnow()
            test_instance = SubscriptionInstance(
                subscription_id=subscription.id,
                amount=subscription.amount,
                billing_time=now + timedelta(hours=1),  # –ß–µ—Ä–µ–∑ —á–∞—Å
                replenishment_time=now + timedelta(hours=2),  # –ß–µ—Ä–µ–∑ 2 —á–∞—Å–∞
                status=StatusEnum.PROGRESS
            )
            
            db.add(test_instance)
            db.commit()
            
            logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä: {subscription.name} - {subscription.amount/100}‚ÇΩ")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞: {e}")
            if db:
                try:
                    db.rollback()
                except:
                    pass
        finally:
            if db:
                try:
                    db.close()
                except:
                    pass
    
    def create_new_month_instances(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –ø–æ–¥–ø–∏—Å–æ–∫ –¥–ª—è –Ω–æ–≤–æ–≥–æ –º–µ—Å—è—Ü–∞ (–∫–∞–∫ –∫–Ω–æ–ø–∫–∞ '–ù–æ–≤—ã–π –º–µ—Å—è—Ü')"""
        try:
            logger.info("üïê –ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏: —Å–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –¥–ª—è –Ω–æ–≤–æ–≥–æ –º–µ—Å—è—Ü–∞")
            
            from app.subscription.services import create_monthly_instances
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–∏–π —Å–µ—Ä–≤–∏—Å
            result = create_monthly_instances()
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            logger.info(f"‚úÖ {result['message']}")
            if result['created_instances']:
                created_names = [inst['subscription_name'] for inst in result['created_instances']]
                logger.info(f"üìã –°–æ–∑–¥–∞–Ω–Ω—ã–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã: {', '.join(created_names)}")
            if result['skipped_subscriptions']:
                skipped_names = [sub['subscription_name'] for sub in result['skipped_subscriptions']]
                logger.info(f"‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ: {', '.join(skipped_names)}")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –¥–ª—è –Ω–æ–≤–æ–≥–æ –º–µ—Å—è—Ü–∞: {e}")
    
    def log_scheduler_status(self):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        try:
            jobs = self.scheduler.get_jobs()
            logger.info(f"üìä –°—Ç–∞—Ç—É—Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {len(jobs)} –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á")
            
            for job in jobs:
                next_run = job.next_run_time.strftime('%H:%M:%S') if job.next_run_time else '–ù–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ'
                logger.info(f"  ‚Ä¢ {job.name}: —Å–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—É—Å–∫ –≤ {next_run}")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}")
    
    def start(self):
        """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        try:
            self.scheduler.start()
            logger.info("üöÄ –¢–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏
            jobs = self.scheduler.get_jobs()
            logger.info(f"üìã –ù–∞—Å—Ç—Ä–æ–µ–Ω–æ –∑–∞–¥–∞—á: {len(jobs)}")
            for job in jobs:
                next_run = job.next_run_time.strftime('%H:%M:%S') if job.next_run_time else '–ù–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ'
                logger.info(f"  ‚Ä¢ {job.name}: —Å–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—É—Å–∫ –≤ {next_run}")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        try:
            self.scheduler.shutdown()
            logger.info("üõë –¢–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")
    
    def get_jobs(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –∑–∞–¥–∞—á"""
        return self.scheduler.get_jobs()

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
test_scheduler = TestScheduler() 